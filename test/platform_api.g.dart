// Copyright (C) 2023 Bob
// This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; version 2.
// This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
// You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
//
// Autogenerated from Pigeon (v25.3.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, unnecessary_import, no_leading_underscores_for_local_identifiers
// ignore_for_file: avoid_relative_lib_imports
import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;
import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';
import 'package:flutter_test/flutter_test.dart';

import 'package:azari/src/generated/platform/platform_api.g.dart';


class _PigeonCodec extends StandardMessageCodec {
  const _PigeonCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is int) {
      buffer.putUint8(4);
      buffer.putInt64(value);
    }    else if (value is FilesCursorType) {
      buffer.putUint8(129);
      writeValue(buffer, value.index);
    }    else if (value is FilesSortingMode) {
      buffer.putUint8(130);
      writeValue(buffer, value.index);
    }    else if (value is VideoPlaybackState) {
      buffer.putUint8(131);
      writeValue(buffer, value.index);
    }    else if (value is NotificationGroup) {
      buffer.putUint8(132);
      writeValue(buffer, value.index);
    }    else if (value is NotificationChannel) {
      buffer.putUint8(133);
      writeValue(buffer, value.index);
    }    else if (value is NotificationRouteEvent) {
      buffer.putUint8(134);
      writeValue(buffer, value.index);
    }    else if (value is GalleryPageChangeEvent) {
      buffer.putUint8(135);
      writeValue(buffer, value.index);
    }    else if (value is Directory) {
      buffer.putUint8(136);
      writeValue(buffer, value.encode());
    }    else if (value is DirectoryFile) {
      buffer.putUint8(137);
      writeValue(buffer, value.encode());
    }    else if (value is UriFile) {
      buffer.putUint8(138);
      writeValue(buffer, value.encode());
    }    else if (value is GalleryMetadata) {
      buffer.putUint8(139);
      writeValue(buffer, value.encode());
    }    else if (value is CopyOp) {
      buffer.putUint8(140);
      writeValue(buffer, value.encode());
    }    else if (value is Notification) {
      buffer.putUint8(141);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 129: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : FilesCursorType.values[value];
      case 130: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : FilesSortingMode.values[value];
      case 131: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : VideoPlaybackState.values[value];
      case 132: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : NotificationGroup.values[value];
      case 133: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : NotificationChannel.values[value];
      case 134: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : NotificationRouteEvent.values[value];
      case 135: 
        final int? value = readValue(buffer) as int?;
        return value == null ? null : GalleryPageChangeEvent.values[value];
      case 136: 
        return Directory.decode(readValue(buffer)!);
      case 137: 
        return DirectoryFile.decode(readValue(buffer)!);
      case 138: 
        return UriFile.decode(readValue(buffer)!);
      case 139: 
        return GalleryMetadata.decode(readValue(buffer)!);
      case 140: 
        return CopyOp.decode(readValue(buffer)!);
      case 141: 
        return Notification.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}
